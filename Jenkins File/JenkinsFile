pipeline {
    agent any
    tools {
        docker 'docker'
    }
    environment {
        DOCKER_IMAGE = 'flask-app'
        DOCKER_REGISTRY = 'https://console.aws.amazon.com/ecr/repositories'
        K8S_CLUSTER = 'my-web'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        GIT_REPO = 'https://github.com/kumarsashangy456/DevOps_Task' 
        GIT_CREDENTIALS_ID = 'admin'
        DOCKER_CREDENTIALS_ID = 'admin'
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/master']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: GIT_CREDENTIALS_ID, url: GIT_REPO]]])
            }
        }

        stage('Login to Docker Registry') {
            steps {
                withDockerRegistry([credentialsId: DOCKER_CREDENTIALS_ID, url: 'https://console.aws.amazon.com/ecr/repositories/v1/']) {
                    script {
                        // Login to Docker registry
                        sh 'docker login'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER} .
                    """
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Push the Docker image to the registry with the build number tag
                    sh """
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Set Kubernetes Context (ensure kubectl is configured on Jenkins agent)
                    sh "kubectl config use-context ${K8S_CLUSTER}"

                    // Apply Kubernetes Deployment and Service Definition
                    sh """
                        kubectl set image deployment/${DOCKER_IMAGE} ${DOCKER_IMAGE}=${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_NUMBER}
                        kubectl apply -f deployment.yml
                        kubectl apply -f service.yml
                        kubectl apply -f hpa.yml
                    """
                }
            }
        }

    }

    post {
        always {
            echo "Cleaning up and finishing pipeline"
            // Cleanup actions if necessary
        }

        success {
            echo "Pipeline finished successfully!"
        }

        failure {
            echo "Pipeline failed."
        }
    }
}
